# 1
"""
Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa
funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros
entre 1 y el n√∫mero que indique el usuario
"""
def factorial(n):
    if n == 0:
        return 1
    else:
        result = factorial(n - 1)
        print(f"El factorial de {n} es: {n * result}")
        return n * result

def factoriales():
    numero: int = int(input("Ingrese un n√∫mero entero positivo: "))
    print("\nFactoriales desde 1 hasta", numero, ":")

    if numero < 1:
        print("Por favor ingrese un n√∫mero mayor o igual a 1")
        return
    
    # factorial(numero - 1)
    return factorial(numero)

factoriales()

# 2
"""
Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n
indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario
especifique.
"""
def fibonacci(n, memo={0: 0, 1: 1}):
    """
    Funci√≥n recursiva que calcula el n-√©simo n√∫mero de Fibonacci.
    Utiliza memorizaci√≥n para mejorar la eficiencia.
    """
    if n not in memo:
        memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo)
    return memo[n]

def mostrar_serie_fibonacci():
    """
    Muestra la serie de Fibonacci desde la posici√≥n 0 hasta n
    """
    posicion = int(input("Ingrese la posici√≥n hasta la que desea ver la serie de Fibonacci: "))
    if posicion < 0:
        print("Por favor ingrese un n√∫mero no negativo")

    print(f"Serie de Fibonacci hasta la posici√≥n {posicion}:")
    for i in range(posicion + 1):
        print(f"Posici√≥n {i}: {fibonacci(i)}", end=" \n ")
    print()  # Salto de l√≠nea al final

mostrar_serie_fibonacci()

# 3
"""
Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un
exponente, utilizando la f√≥rmula ùëõ
ùëö = ùëõ ‚àó ùëõ
(ùëö‚àí1)
. Prueba esta funci√≥n en un
algoritmo general.
"""
def potenciador(num: int, posicion: int): 
  return num * num if posicion == 2 else num * potenciador(num, posicion - 1)

print(potenciador(12, 5))

# 4
"""
Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base
decimal y devuelva su representaci√≥n en binario como una cadena de texto.
"""
def de_decimal_a_binario(num: int):
    if num <= 1:
        return str(num)

    return de_decimal_a_binario(num // 2) + str(num % 2)

numero = int(input("Ingrese un n√∫mero entero positivo: "))
if numero < 0:
  print("Por favor ingrese un n√∫mero positivo")
else:
  binario = de_decimal_a_binario(numero)
  print(f"El n√∫mero {numero} en binario es: {binario}")

# 5
"""
Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una
cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no
lo es.
Requisitos:
La soluci√≥n debe ser recursiva.
No se debe usar [::-1] ni la funci√≥n reversed().
Ejemplos:
  es_palindromo("anita lava la tina") -> True
  es_palindromo("ana abre la ventana") -> False
"""
def  es_palindromo(palabra: str)-> bool:
  # Validacion para aceptar tambien frases
  palabra = palabra.replace(" ", "")
  if len(palabra) == 1:
    return True

  if palabra[0] == palabra[-1]:
    return es_palindromo(palabra[1:-1])

  return False

print(es_palindromo(input("Ingrese una palabra o frase: ")))

# 6
"""
Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un
n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.
Restricciones:
No se puede convertir el n√∫mero a string.
Us√° operaciones matem√°ticas (%, //) y recursi√≥n.
Ejemplos:
  suma_digitos(1234) ‚Üí 10 (1 + 2 + 3 + 4)
  suma_digitos(9) ‚Üí 9
  suma_digitos(305) ‚Üí 8 (3 + 0 + 5)
"""
def  suma_digitos(num: int) -> int:
  return num if num < 10 else num % 10 + suma_digitos(num // 10)

print(suma_digitos(int(input("Ingrese un numero: "))))

# 7
"""
Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n
bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al
√∫ltimo nivel con un solo bloque.
Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el
nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la
pir√°mide.
Ejemplos:
  contar_bloques(1) ‚Üí 1 (1)
  contar_bloques(2) ‚Üí 3 (2 + 1)
  contar_bloques(4) ‚Üí 10 (4 + 3 + 2 + 1)
"""
def  contar_bloques(num: int) -> int:
  return 1 if num == 1 else num + contar_bloques(num - 1)

print(contar_bloques(int(input("Ingrese un numero: "))))

# 8
"""
Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un
n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces
aparece ese d√≠gito dentro del n√∫mero.
Ejemplos:
  contar_digito(12233421, 2) ‚Üí 3
  contar_digito(5555, 5) ‚Üí 4
"""
def contar_digito(numero: int, digito: int) -> int:
  if numero == 0:
      return 0
  return (1 if numero % 10 == digito else 0) + contar_digito(numero // 10, digito)

print(contar_digito(int(input("Ingrese un numero: "))))